// Code generated by MockGen. DO NOT EDIT.
// Source: infraestructure/db/repos/querier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repos "github.com/deuna/payment/infraestructure/db/repos"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockQuerier) CreateTransaction(ctx context.Context, arg repos.CreateTransactionParams) (repos.CreateTransactionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, arg)
	ret0, _ := ret[0].(repos.CreateTransactionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockQuerierMockRecorder) CreateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockQuerier)(nil).CreateTransaction), ctx, arg)
}

// GetTransaction mocks base method.
func (m *MockQuerier) GetTransaction(ctx context.Context, id uuid.UUID) (repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, id)
	ret0, _ := ret[0].(repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockQuerierMockRecorder) GetTransaction(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockQuerier)(nil).GetTransaction), ctx, id)
}

// GetUser mocks base method.
func (m *MockQuerier) GetUser(ctx context.Context, email string) (repos.GetUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(repos.GetUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockQuerierMockRecorder) GetUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockQuerier)(nil).GetUser), ctx, email)
}

// ListTransactions mocks base method.
func (m *MockQuerier) ListTransactions(ctx context.Context) ([]repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx)
	ret0, _ := ret[0].([]repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockQuerierMockRecorder) ListTransactions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockQuerier)(nil).ListTransactions), ctx)
}

// ListTransactionsByMechant mocks base method.
func (m *MockQuerier) ListTransactionsByMechant(ctx context.Context, merchantID uuid.UUID) ([]repos.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByMechant", ctx, merchantID)
	ret0, _ := ret[0].([]repos.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsByMechant indicates an expected call of ListTransactionsByMechant.
func (mr *MockQuerierMockRecorder) ListTransactionsByMechant(ctx, merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByMechant", reflect.TypeOf((*MockQuerier)(nil).ListTransactionsByMechant), ctx, merchantID)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context) ([]repos.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]repos.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx)
}

// UpdateTransaction mocks base method.
func (m *MockQuerier) UpdateTransaction(ctx context.Context, arg repos.UpdateTransactionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockQuerierMockRecorder) UpdateTransaction(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockQuerier)(nil).UpdateTransaction), ctx, arg)
}

// UpdateTransactionType mocks base method.
func (m *MockQuerier) UpdateTransactionType(ctx context.Context, arg repos.UpdateTransactionTypeParams) (repos.UpdateTransactionTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionType", ctx, arg)
	ret0, _ := ret[0].(repos.UpdateTransactionTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionType indicates an expected call of UpdateTransactionType.
func (mr *MockQuerierMockRecorder) UpdateTransactionType(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionType", reflect.TypeOf((*MockQuerier)(nil).UpdateTransactionType), ctx, arg)
}
